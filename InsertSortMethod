public class InsertSortMethod {
    public static void main(String args[]) {
        
        //Assume inputs are not sorted
        int[] unSortedArr = {5, 9, 1, -3, 6, -1, 0};
        
        insertSort(unSortedArr, arrSize);
        
        //This declaration is not necessary but this is just for easier understanding
        int[] sortedArr = unsortedArr;
        
        print(sortedArr, arrSize);
        
    }
    //Function used to sort the array via insertSort from smallest to greatest
    //Worst case time complexity is 0(n^2) as the array is already sorted from greatest to least (have to compare every value)
    //Best case time complexity is 0(n) as array is already sorted from least to greatest
    
    public static void insertSort(int[] unSortedArr){
        int arrSize = unSortedArr.length;
        for(int i = 1; i < arrSize; i++){
            //Must keep track of current input value
            int currentIndexValue = unSortedArr[i];
            
            //Assign the current index of unSortedArr -> index of SortedArr
            int j = i;
            
            //If index has to be greater 0, if not greater than 0; this means that the value is the first value of the array
            // As well the value at the previous index must be greater than the value of the current index
            //Continously do this until the value of the previous index is not longer greater than the value of the current index
            while(j > 0 && arr[j-1] > currentIndexValue ){
                sortedArr[j] = sortedArr[j-1];
                j--;    
            }
            
            //As we know this is the smallest value, we can assign that value to it current index
            //This will let us know that there is not value larger than this in the sorted array
            sortedArr[j] = currentIndexValue;
        
        }
    }
    public static void print(int arr[], int n){
        for(int i = 0; i < n; i++){
            System.out.println(arr[i] + " ");
        }
    }
}
